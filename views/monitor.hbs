<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="stylesheet" href="/css/monitor.css">
  <link rel="stylesheet" href="/css/common.css">
  <style>
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      z-index: 1000;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease;
      max-width: 300px;
    }
    
    .notification.show {
      opacity: 1;
      transform: translateX(0);
    }
    
    .notification.success {
      background-color: #4CAF50;
    }
    
    .notification.error {
      background-color: #f44336;
    }
  </style>
</head>
<body>

  
  <header>
    <div class="logo">
        <a href="../css/index.html">
            <img src="../asset/lock.png" alt="Lock icon" class="icon-img">
        </a>
        <p class="icon-text">Smart Lock</p>
    </div>

    <nav>
      <div class="left-header">
        <a href="/history" class="button">Home</a>
        <a href="/profile" class="button">Profile</a>
        <a href="/signout" class="button">Sign out</a>
        <p>Hello {{user.username}}</p>
      </div>
    </nav>
</header>
<main>
  <aside>
      <form action="/monitor" method="get" style="width:100%">
        <button type="submit" class="side-btn active" style="width:100%">Monitor</button>
      </form>
      <form action="/history" method="get" style="width:100%">
        <button type="submit" class="side-btn" style="width:100%">History</button>
      </form>
      {{!-- <button class="side-btn">History</button> --}}
      {{!-- <button class="side-btn" onclick="controlLock('Lock')">Lock</button>
      <button class="side-btn" onclick="controlLock('Unlock')">Unlock</button> --}}
  </aside>
  <div class="content">
    {{!-- <div class="card" onclick="control('Add_finger_print')">
      <img src="/asset/fingerprint.svg" alt="Fingerprint">
      <p id="add-fingerprint">Add Fingerprint</p>
    </div> --}}
    <div class="card" onclick="control('changePassword')">
      <img src="/asset/password.svg" alt="Password">
      <p>Change Password</p>
    </div>

    <div class="card" onclick="control('Unlock')">
      <img src="/asset/unlock.svg" alt="Lock">
      <p>Unlock</p>
    </div>
    <div class="card" onclick="control('Buzzer')">
      <img src="/asset/alert.svg" alt="Lock">
      <p>Buzzer</p>
    </div>
    <div class="card" onclick="goToCamera()">
      <img src="/asset/camera.svg" alt="Camera">
      <p>Camera</p>
    </div>
  </div>
</main>

<!-- Notification container -->
<div id="notification-container"></div>

</body>
<script>
  console.log({{lockState}});
  
  // Simple notification system
  function showNotification(message, type = 'success') {
    const container = document.getElementById('notification-container');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    // Show notification
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    // Auto hide after 3 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 300);
    }, 3000);
  }
  
  function goToCamera() {
    window.location.href = '/camera';
  }
  
  async function control(command) {
    try {
      console.log("Sending command:", command);
      
      const response = await fetch('/control', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ command }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        let message = '';
        switch(command) {
          case 'Unlock':
            message = 'üîì M·ªü c·ª≠a th√†nh c√¥ng!';
            break;
          case 'Buzzer':
            message = 'üîî Buzzer ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!';
            break;
          case 'changePassword':
            message = 'üîë Y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i!';
            break;
          default:
            message = data.message || `L·ªánh ${command} ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng!`;
        }
        showNotification(message, 'success');
      } else {
        showNotification('‚ùå L·ªói: ' + (data.message || 'Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh'), 'error');
      }
      
    } catch (error) {
      console.error('Error sending command:', error);
      showNotification('‚ö†Ô∏è L·ªói k·∫øt n·ªëi t·ªõi server!', 'error');
    }
  }
</script>
</html>
